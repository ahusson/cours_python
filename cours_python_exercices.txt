## EXERCISES ##


## STRINGS

1. Create a program that prompts a user to enter their name and display it on screen.


2. Create a program that prompts a user to enter their name and display the following output on screen:
...My name is <THE VALUE OF THE VARIABLE name>


3. Given the following character string s = "hello, world !", create a program and output the string in reverse.
The output should be "! dlrow ,olleh".


4. Create a program that prompts a user to enter the dimensions of their house (lenght, width) and display the house perimeter on screen.


5. Same as 2. for the area of the house.



## CONTROL FLOW

6. Create a program that prompts the user for their latest grade, check whether their grade is between 0 to 20 included, and display their letter grade on screen according to the following scheme:
[0, 5[ -> "F"
[5, 10[ -> "D"
[10, 15[ -> "C"
[15, 18[ -> "B"
[18, 20] -> "A"



7. Given a list of integers l = [1, 2, 3, 4, 5]
Write a for-loop to display the following output:
...The current value is: 1
...The current value is: 2
...The current value is: 3
...The current value is: 4
...The current value is: 5


8. Same as 6 but with a while-loop.


9. Given the following list of strings l = ["1", "2", "3", "4", "5"], return the sum of the integer values. The output should be the sum of the integers from 1 to 5 included, so 15.


10. Create a program that prompts the user for an integer strictly greater than 1 and display True if that number is prime, False otherwise.


11. Create a program that reads the content of myfile.txt using the read method and displays it on screen.



## BUILTIN TYPES - LISTS

12. Given the following list l = [34, 45, 67, 89], create a program that displays the 3rd element on screen.


13. Given the following list l = [34, 45, 67, 89], create a program that increments the 2nd element by 1.


14. Given a list l = [1, 2, 3, 4, 5], create a program that reverses the list and displays the result on screen.


15. Given an empty list l = [], create a program that fills the list with all integers up to 20 included. Use the range function.


16. Same as 15. but do NOT use the range function.


17. Same as 15. but only include the even integers. You may or may not use the range function.


18. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that prompts the user for a number between 1 to 10 included and displays True if the number is in l, or False otherwise.


19. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that displays the minimum number in the list.


20. Same as 19. but for the maximum.


21. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that removes (Hint: pops) the last element from the list and displays that element on screen.


22. Same as 21. but for the element at index 2.


23. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that displays the number of element in the list. Use the function "len".


24. Same as 23. but do NOT use "len".


25. Given a list l = [45, 34, 25, 105, 546, 1, 32], create a program that sorts the list in ascending order, then display the result on screen.


26. Create a program that displays a list containing the square of each integer from 1 to 10 included, and do so using list comprehension.



## BUILTIN TYPES - SETS


27. Given a list l = [1, 2, 3], cast the list to a type "set" and display the result.


28. Given a list l = [1, 1, 2, 3], cast the list to type "set" and display the result. Notice what happened ?


29. Given 2 sets s1 = {1, 2} and s2 = {1, 3}, create a program that displays the intersection of those 2 sets. Here the "intersection" is to be understood in the mathematical sense.


30. Given 2 sets s1 = {1, 2} and s2 = {1, 3}, create a program that returns True if s1 is a subset of s2, or False otherwise. Here being a "subset of" is to be understood in the mathematical sense.


31. Same as 30. but for the following new sets s1 = {1, 2} and s2 = {1, 2, 3}.



## BUILTIN TYPES - DICTS


32. Given a list l = [1, 1, 1, 2, 2, 3], create a dict that contains the elements from the list l as a key and the number of occurences of that element in l as a value.


33. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that displays the keys of the dict d. Hint: Try using the "keys" method.


34. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that displays the values of the dict d. Hint: Try using the "values" method.


35. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that displays the key-value pairs in the following format

...key = a value = 23
...key = b value = 45
...key = c value = 2

Hint: Try using the "items" method.


36. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that removes the key-value pair associated to the "a" key and displays it on screen.


37. (HARDER)
Given an integer s = 10 and a list l = [1, 3, 5, 5, 7, 10], create a program that creates a set of all pairs of integers (i, j) such that i + j = s. The output given the variables s and l above should be {(3, 7), (5, 5)} (notice (3, 7) a,d (7, 3) are duplicates so only one is needed.)


38. Create a program that reads the content of myotherfile.txt and displays each line on screen. The out put should look something like:
... content of line 1
... content of line 2
... etc.

Hint: try using the readlines method



## FUNCTIONS


39. Given the following code snippets, answer the corresponding questions:

i)

def f(x):
    x += 1

x = 1
f(x)
print(x)

What happened to x and why ?

ii)

def g():
    global y
    y += 1

y = 1
g()
print(y)

What happened to y and why ?

iii)

def h(x):
    x[1] = 34

l = [1,2,3]
h(l)
print(l)

What happened to l and why ?

iv)

def k(x):
    x += (45,)

t = (1, 2, 3)
k(t)
print(t)

What happened to t and why ?


40. Create a function that takes an integer greater than or equal to 0 and returns the factorial of that integer.

NOTE: the factorial sequence is defined using the following recurrence formula: a_0 = 1, a_n = n * a_n-1 for all n >= 1


41. Same as 40 but using recursion


42. Write a function that takes a string as a parameter and returns a boolean that is True if the string is a palindrome and False otherwise

NOTE: A palindrome is a string that reads the same forward and backward (eg. "albla", "adrieirda" are palindromes)


43. Write a function that takes an arbitrary number of integer arguments and return the sum of these integers


44. Write a function that takes in a float argument called radius and returns a float value which is the area of the associated circle.

Hint: for the irrationnal number pi you can either:

i) import math
math.pi

ii) import numpy
numpy.pi

iii) simply use 3.14 as a rough approximation


45. Same as 44. but return both the area and the perimeter of the circle. I want you to return 2 values.


46.
i) Write a function that takes in a float argument x and return a float value x^2 (x squared)

ii) Write a function df which takes in a float argument x and an optional parameter that accepts functions (kwarg with default value None) and return the derivative of your function f (from (i)) evaluated at x
          - do this with an explicit formula
          - if the optional parameter is passed in, let's call it f, do this using the variation (f(x + h) - f(x)) / h for small h

iii) use the area function from 43. as an optional parameter and return the perimeter of the circle using df



47. Write a function called l2_norm which returns the l2 norm (pythagorean norm) of a vector of arbitrary lenght

NOTE: if x = (x1, x2, ..., xn), then l2_norm(x) := sqrt(x1^2 + x2^2 + ... + xn^2) where sqrt is the square root of a positive real number.


48. Write a function that takes a matrix (a list of lists) as a parameter and returns its transpose (M -> M^T).
Test using [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


49. Write a function that takes two matrices (2 lists of lists) as parameters and returns the addition of the two matrices
Test using [[1, 2, 3], [4, 5, 6], [7, 8, 9]] by adding it with itself


50. Write a one liner "lambda" function that takes a parameter x and return x^2
Test it with the parameter 3


51. Write a one liner "lambda" function that takes two parameters x and y and return x^2 + y^2
Test it with the parameter 1, 2


52. Write a function that takes two matrices (2 lists of lists) as parameters and returns the multiplication of the two matrices
Test using [[1, 2, 3], [4, 5, 6], [7, 8, 9]] by multiplying it with itself


53. Given the following list of lists [[1, 34, 3], [4, 2, 6], [7, 22, 9]], sort it according to the ordering of the second elements

Hint 1: the result should be [[4, 2, 6], [7, 22, 9], [1, 34, 3]]
Hint 2: use the built-in function sorted and pass in a kwarg argument called key

NOTE: Don't hesitate to look at the documentation online for how to use the sorted function



## EXCEPTIONS


54. Write a function that takes two integers as parameters and return the division of the first one by the second one
Test using the the following inputs: (2, 0)
Handle the exception. Hint: Use ZeroDivisionError


55. Write a function that asks the user for an integer input and return the value of the integer input + 1
Test using the following user inputs: "wrong input"
Handle the exception. Hint: Use ValueError


56. Write a function that takes a file name as input and returns the content of the file
Test using the following inputs: "my_very_unprobable_filename.txt"
Handle the exception. Hint: Use FileNotFoundError


57. Write a function that takes two arguments, a list l and an integer i, and return the element in l at index i
Test using the following inputs: l = [1, 2, 3], i = 15
Handle the exception. Hint: Use IndexError


58. Write a function that takes two arguments, a dict d and a string s, and return the element in d at key s
Test using the following inputs: d = {"a": 15, "b": 34, "c": "some other value"}, i = "bla"
Handle the exception. Hint: Use KeyError


59. Same as 32. but try using exception handling instead of a logic condition


60. (HARDER) Create a decorator called exec_time that displays on screen the time it takes for the function it decorates to execute

You can use the library time to get the current time, for example:

import time
print(time.time())  # this will output something like 1695843246.158617

NOTE: What this tells you is the amount of seconds since 01/01/1970

Test your decorator on the following functions

def f():
    print("Inside my function f")

def g(x):
    x += 1
    return x
