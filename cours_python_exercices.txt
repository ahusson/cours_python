## EXERCISES ##


## STRINGS

1. Create a program that prompts a user to enter their name and display it on screen.


2. Create a program that prompts a user to enter their name and display the following output on screen:
...My name is <THE VALUE OF THE VARIABLE name>


3. Given the following character string s = "hello, world !", create a program and output the string in reverse.
The output should be "! dlrow ,olleh".


4. Create a program that prompts a user to enter the dimensions of their house (lenght, width) and display the house perimeter on screen.


5. Same as 2. for the area of the house.



## CONTROL FLOW

6. Create a program that prompts the user for their latest grade, check whether their grade is between 0 to 20 included, and display their letter grade on screen according to the following scheme:
[0, 5[ -> "F"
[5, 10[ -> "D"
[10, 15[ -> "C"
[15, 18[ -> "B"
[18, 20] -> "A"



7. Given a list of integers l = [1, 2, 3, 4, 5]
Write a for-loop to display the following output:
...The current value is: 1
...The current value is: 2
...The current value is: 3
...The current value is: 4
...The current value is: 5


8. Same as 6 but with a while-loop.


9. Given the following list of strings l = ["1", "2", "3", "4", "5"], return the sum of the integer values. The output should be the sum of the integers from 1 to 5 included, so 15.


10. Create a program that prompts the user for an integer strictly greater than 1 and display True if that number is prime, False otherwise.


11. Create a program that reads the content of myfile.txt using the read method and displays it on screen.



## BUILTIN TYPES - LISTS

12. Given the following list l = [34, 45, 67, 89], create a program that displays the 3rd element on screen.


13. Given the following list l = [34, 45, 67, 89], create a program that increments the 2nd element by 1.


14. Given a list l = [1, 2, 3, 4, 5], create a program that reverses the list and displays the result on screen.


15. Given an empty list l = [], create a program that fills the list with all integers up to 20 included. Use the range function.


16. Same as 15. but do NOT use the range function.


17. Same as 15. but only include the even integers. You may or may not use the range function.


18. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that prompts the user for a number between 1 to 10 included and displays True if the number is in l, or False otherwise.


19. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that displays the minimum number in the list.


20. Same as 19. but for the maximum.


21. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that removes (Hint: pops) the last element from the list and displays that element on screen.


22. Same as 21. but for the element at index 2.


23. Given the following list l = [2, 4, 6, 7, 8, 9], create a program that displays the number of element in the list. Use the function "len".


24. Same as 23. but do NOT use "len".


25. Given a list l = [45, 34, 25, 105, 546, 1, 32], create a program that sorts the list in ascending order, then display the result on screen.


26. Create a program that displays a list containing the square of each integer from 1 to 10 included, and do so using list comprehension.



## BUILTIN TYPES - SETS


27. Given a list l = [1, 2, 3], cast the list to a type "set" and display the result.


28. Given a list l = [1, 1, 2, 3], cast the list to type "set" and display the result. Notice what happened ?


29. Given 2 sets s1 = {1, 2} and s2 = {1, 3}, create a program that displays the intersection of those 2 sets. Here the "intersection" is to be understood in the mathematical sense.


30. Given 2 sets s1 = {1, 2} and s2 = {1, 3}, create a program that returns True if s1 is a subset of s2, or False otherwise. Here being a "subset of" is to be understood in the mathematical sense.


31. Same as 30. but for the following new sets s1 = {1, 2} and s2 = {1, 2, 3}.



## BUILTIN TYPES - DICTS


32. Given a list l = [1, 1, 1, 2, 2, 3], create a dict that contains the elements from the list l as a key and the number of occurences of that element in l as a value.


33. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that displays the keys of the dict d. Hint: Try using the "keys" method.


34. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that displays the values of the dict d. Hint: Try using the "values" method.


35. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that displays the key-value pairs in the following format

...key = a value = 23
...key = b value = 45
...key = c value = 2

Hint: Try using the "items" method.


36. Given a dictionary d = {"a": 23, "b": 45, "c": 2}, create a program that removes the key-value pair associated to the "a" key and displays it on screen.


37. (HARDER)
Given an integer s = 10 and a list l = [1, 3, 5, 5, 7, 10], create a program that creates a set of all pairs of integers (i, j) such that i + j = s. The output given the variables s and l above should be {(3, 7), (5, 5)} (notice (3, 7) a,d (7, 3) are duplicates so only one is needed.)


38. Create a program that reads the content of myotherfile.txt and displays each line on screen. The out put should look something like:
... content of line 1
... content of line 2
... etc.

Hint: try using the readlines method



## FUNCTIONS


39. Given the following code snippets, answer the corresponding questions:

i)

def f(x):
    x += 1

x = 1
f(x)
print(x)

What happened to x and why ?

ii)

def g():
    global y
    y += 1

y = 1
g()
print(y)

What happened to y and why ?

iii)

def h(x):
    x[1] = 34

l = [1,2,3]
h(l)
print(l)

What happened to l and why ?

iv)

def k(x):
    x += (45,)

t = (1, 2, 3)
k(t)
print(t)

What happened to t and why ?


40. Create a function that takes an integer greater than or equal to 0 and returns the factorial of that integer.

NOTE: the factorial sequence is defined using the following recurrence formula: a_0 = 1, a_n = n * a_n-1 for all n >= 1


41. Same as 40 but using recursion


42. Write a function that takes a string as a parameter and returns a boolean that is True if the string is a palindrome and False otherwise

NOTE: A palindrome is a string that reads the same forward and backward (eg. "albla", "adrieirda" are palindromes)


43. Write a function that takes an arbitrary number of integer arguments and return the sum of these integers


44. Write a function that takes in a float argument called radius and returns a float value which is the area of the associated circle.

Hint: for the irrationnal number pi you can either:

i) import math
math.pi

ii) import numpy
numpy.pi

iii) simply use 3.14 as a rough approximation


45. Same as 44. but return both the area and the perimeter of the circle. I want you to return 2 values.


46.
i) Write a function that takes in a float argument x and return a float value x^2 (x squared)

ii) Write a function df which takes in a float argument x and an optional parameter that accepts functions (kwarg with default value None) and return the derivative of your function f (from (i)) evaluated at x
          - do this with an explicit formula
          - if the optional parameter is passed in, let's call it f, do this using the variation (f(x + h) - f(x)) / h for small h

iii) use the area function from 43. as an optional parameter and return the perimeter of the circle using df



47. Write a function called l2_norm which returns the l2 norm (pythagorean norm) of a vector of arbitrary lenght

NOTE: if x = (x1, x2, ..., xn), then l2_norm(x) := sqrt(x1^2 + x2^2 + ... + xn^2) where sqrt is the square root of a positive real number.


48. Write a function that takes a matrix (a list of lists) as a parameter and returns its transpose (M -> M^T).
Test using [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


49. Write a function that takes two matrices (2 lists of lists) as parameters and returns the addition of the two matrices
Test using [[1, 2, 3], [4, 5, 6], [7, 8, 9]] by adding it with itself


50. Write a one liner "lambda" function that takes a parameter x and return x^2
Test it with the parameter 3


51. Write a one liner "lambda" function that takes two parameters x and y and return x^2 + y^2
Test it with the parameter 1, 2


52. Write a function that takes two matrices (2 lists of lists) as parameters and returns the multiplication of the two matrices
Test using [[1, 2, 3], [4, 5, 6], [7, 8, 9]] by multiplying it with itself


53. Given the following list of lists [[1, 34, 3], [4, 2, 6], [7, 22, 9]], sort it according to the ordering of the second elements

Hint 1: the result should be [[4, 2, 6], [7, 22, 9], [1, 34, 3]]
Hint 2: use the built-in function sorted and pass in a kwarg argument called key

NOTE: Don't hesitate to look at the documentation online for how to use the sorted function



## EXCEPTIONS


54. Write a function that takes two integers as parameters and return the division of the first one by the second one
Test using the the following inputs: (2, 0)
Handle the exception. Hint: Use ZeroDivisionError


55. Write a function that asks the user for an integer input and return the value of the integer input + 1
Test using the following user inputs: "wrong input"
Handle the exception. Hint: Use ValueError


56. Write a function that takes a file name as input and returns the content of the file
Test using the following inputs: "my_very_unprobable_filename.txt"
Handle the exception. Hint: Use FileNotFoundError


57. Write a function that takes two arguments, a list l and an integer i, and return the element in l at index i
Test using the following inputs: l = [1, 2, 3], i = 15
Handle the exception. Hint: Use IndexError


58. Write a function that takes two arguments, a dict d and a string s, and return the element in d at key s
Test using the following inputs: d = {"a": 15, "b": 34, "c": "some other value"}, i = "bla"
Handle the exception. Hint: Use KeyError


59. Same as 32. but try using exception handling instead of a logic condition


60. (HARDER) Create a decorator called exec_time that displays on screen the time it takes for the function it decorates to execute

You can use the library time to get the current time, for example:

import time
print(time.time())  # this will output something like 1695843246.158617

NOTE: What this tells you is the amount of seconds since 01/01/1970

Test your decorator on the following functions

def f():
    print("Inside my function f")

def g(x):
    x += 1
    return x



## OOP

61. Write a class FifoQueue (fifo stands for first in first out)
    - with an attribute q -> the container of your choice
    - with a method push that inserts an element at the back of the queue q
    - with a method pop that pops and returns the element at the front of the queue q


62. Write a class Stack (a stack is just a lifo queue where lifo stands for last in first out)
    - with an attribute s -> the container of your choice
    - with a method push that inserts elements at the front of the queue
    - with a method pop that pops and return the element at the front of the queue

63 (HARDER). Try doing 61. without using pop(0). Hint: you can use 2 lists


64. Write a classe Circle
    - with an attribute "radius"
    - a method "perimeter" that returns the perimeter of the circle
    - a method "area" that returns the area of the cicle


65. Write a class Animal
    - with an attribute speach, inititalize it to an empty string inside the constructor
    - with a method speak that returns the animal's speach attribute

66. Write a class Dog that inherits from Animal and implements its own method speach

NOTE: a Dog "barks"

67. Write a class Tiger that inherits from Animal and implements its own method speach

NOTE: a Tiger "roar"

68. Write a class Rectangle
    - with an attribute length
    - with an attribute width
    - with a method perimeter
    - with a method area


69. Write a class Square that inherits from Rectangle and verifies that length == width

70. Write a class Car
    - with an attribute "brand"
    - with an attribute "fuel"
    - a method "drive"
        - Everytime the method drive is called the car instance consumes 1 unit of fuel
        - raise an Exception if you attempt to drive with no fuel in the car
    - implement the operator __str__ and return the brand of the car and how much fuel is in the tank

Test:

i) Create an instance of Car with 2 units of fuel
ii) call the drive method 3 times -> Does an Exception  get raised ?
iii) print your instance on screen -> Do you see the expected output from your __str__ implementation ?


71. Write a class named BlackScholesVanilla

with the following attributes:
    - Type:   option's type (1 for call or -1 for put)
    - Pos:    option's position (1 for long -1 for short)
    - S:      option's underlying price
    - K:      option's strike price
    - r:      risk free rate
    - q:      dividend yield
    - T:      time to expiry between in [0, 1] (eg. 36 days to exp -> 36 / 365 ~= 0.1)
    - sigmaT: volatility scaled by time left to expiry (eg. 20% annual vol with 36 days to exp -> ~0.1 * 20% = 2% vol)

with the following methods:
    - theta
    - delta
    - vega
    - gamma
    - premium


72. Write a class named Portfolio with a container (eg. a list) for BlackSholesVanilla objects and the following methods:
    - theta
    - delta
    - vega
    - gamma
    - premium

NOTE: the above greek methods are meant to compute the values at the portfolio level
      For example if I am long a 0.5 delta call and long a -0.5 delta put, the delta method from the Portfolio class should return a net delta of 0


73. Write a class LimitOrder

with the following attributes:
    - price: order price (float value)
    - size:  order size (float value)
    - side:  1 for buy -1 for sell

Implement with the following ordering operators:
    - __lt__
    - __le__
    - __gt__
    - __ge__

Eg. That way expression like LimitOrder(10, 2, 1) < LimitOrder(11, 34, 1) makes sense (is True in this case) 


74. Write a class named OrderBook

with the following attributes:
    - bids, where bids is a decreasing list of buy LimitOrder objects
    - asks, where asks is an increasing list of sell LimitOrder objects

with the following methods:
    - add_bid_order
    - remove_bid_order
    - add_ask_order
    - remove_ask_order
    - best_bid_price
    - best_ask_price
    - spread := best ask - best bid

OPTIONAL: If you're familiar with a heap data structure you may use Python's heapq module on top of your lists

Test:

i) Create an instance of your OrderBook class
ii) Add a bid price 10 size 8
iii) Add a bid price 11 size 86
iv) Add an ask price 13 size 35
v) Add an ask price 15 size 38
vi) Display best bid, best ask, spread -> results should be 11, 13, 2
vii) remove bid at price 11
viii) Display best bid, best ask, spread -> results should be 10, 13, 3



## MODULES

75. Write a function to select a random element from a list


76. Write a function to select a random element from a dict


77. Write a function to select a random element from a set 


78. Write a function that generates random fixed length alphabetical string


79. Write a function to shuffle the elements of a given list


80. Write a function to create a shallow copy of a given list


81. Write a function to read and display the content of the CSV file "sample.csv"


82. Write a function to read and display the content of the JSON file "sample.json"

What data type do you end up with ?


83. Write a function that does nothing for 3 seconds and then prints the string "yeah !"


84. Generate a random list of 100 integers between 0 to 100 (exclusive)


85. Display your system paths on screen


86. Create a Python module with the class "Car" from 70. and create another python module that imports the class "Car", then test like 70.

NOTE: if the two modules aren't in the same path (ie. same folder), then add the path to your list of paths


87. Create a module with the classes from exercice 73. and 74. and create another module called simulator.py

In simulator.py, write code that populates the orderbook by generating ranom LimitOrder objects



## FUNCTIONAL PROGRAMMING


88. Using the list from 84. write a one-liner that returns a list of the values less than or equal to 50 (inclusive) using the built-in "filter" function


89. Using the list from 84. write a one-liner that returns the square of the values in the list using the built-in "map" function


90. Using the list from 84. write a one-liner that returns the sum of the values using the "reduce" method from the package functools


91. Given the following list of strings l = ["cat", "dog", "hedgehog", "gecko"], write a one-liner that returns a list of the strings from l reversed

NOTE: You can use "map" and you can pass in function that implements your work for 3.


92. Given the following list of strings l = ["cat", "dog", "hedgehog", "gecko"], write a one-liner that returns the following string: "cat-dog-hedgehog-gecko"

NOTE: You can use the string "join" method


93. Given the following list of srings

l = ['94', '47', '62', '66', '72', '6', '85', '17', '43', '18', '87', '58', '74', '65', '44', '31', '2', '99', '61', '39', '97', '81', '52', '49', '63', '79', '12', '98', '91', '64', '90', '68', '5', '38', '42', '75', '3', '53', '73', '77', '88', '16', '54', '56', '7', '21', '20', '86', '22', '13', '60', '34', '27', '76', '30', '11', '59', '0', '15', '71', '14', '4', '10', '29', '28', '40', '32', '25', '9', '26', '48', '37', '80', '55', '57', '67', '96', '82', '69', '36', '45', '41', '84', '78', '46', '93', '1', '19', '35', '33', '70', '89', '50', '92', '8', '51', '95', '23', '24', '83']

write a one-liner that returns the sum of the square of the values strictly greater than 15 and less than or equal to 85.


94. Using the list l from 93. return the following string: x0^2-x1^2-...-xn^2 where each xi is a value from l strictly greater than 15 and less than or equal to 85,

and xi <= xj for all i <= j.



## Socket IO - Requests


95. Using the following informations, write a function that executes a "GET" request and return the data as a dict.
    - url: https://httpbin
    - endpoint: /get


96. Using the following informations, write a function that returns a list containing [best bid price, best ask price]:
    - url: https://api.binance.com
    - endpoint: /api/v3/depth
    - params: symbol="BTCUSDT" (spot market)


97. Using the following informations, write a function that returns a list of the last 10 trades being executed:
    - url: https://api.binance.com
    - endpoint: /api/v3/historicalTrades
    - params:
        - symbol="BTCUSDT" (spot market)
        - limit=100 (there can be fewer than 100 trades and it is ok)


98. Using the following informations, write a function that runs for 10 minutes and prints the total volume traded every 10 seconds:
    - url: https://api.binance.com
    - endpoint: /api/v3/historicalTrades
    - params:
        - symbol="BTCUSDT" (spot market)
        - fromId=<ID OF THE LAST TRADE FROM THE PREVIOUS REQUEST> (the data returned can be empty and it's ok)


99. Write a function that uses your function from 100. and write the data in a CSV file named "BTCUSDT_10_seconds_aggregate_volume.csv" with the following columns:
    - id
    - time
    - price
    - quantity

NOTE: the above fields should be casted to string before writing to the file.


100. Write a function that uses your function from 98. and write the best bid / offer to a CSV file named "BTCUSDT_10_seconds_best_bid_ask.csv" with the following columns:
    - lastUpdateId
    - bid_price
    - ask_price

NOTE: the above fields should be casted to string before writing to the file.
